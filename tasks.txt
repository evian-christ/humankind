# Next Steps for Godot Project (as of 2025-08-12)

## Recent Updates (2025-08-12)
*   'Spin' 버튼과 `_on_spin_button_pressed()` 함수 연결 및 배치 로직 개선.
*   `_get_nearby_coordinates()` 도우미 함수 구현 및 테스트 완료.
*   **통일된 '트리거(Trigger)' 및 '효과(Effect)' 시스템 설계 완료:**
    *   `Effect.gd`, `FoodEffect.gd` (효과 본체) 기본 클래스 및 구체적 효과 정의.
    *   `EffectTrigger.gd`, `AlwaysActiveTrigger.gd`, `NearbyInteractionTrigger.gd`, `CounterTrigger.gd` (트리거 조건) 기본 클래스 및 구체적 트리거 정의.
    *   `Symbol` 리소스에 `triggers` 배열 추가.
    *   `PlayerSymbolInstance`에 `effect_counters` 딕셔너리 추가.
    *   `gameboard.gd`의 `_process_symbol_interactions()` 로직을 트리거 시스템에 맞춰 변경.
    *   `_update_food_amount` 헬퍼 함수 추가.

## [x] 1. 심볼 인스턴스 ID 생성 및 관리 (SymbolData.gd 수정)
*   **목표:** `SymbolData`가 플레이어가 소유할 개별 심볼 인스턴스(`PlayerSymbolInstance`)에 고유한 ID를 부여하고 생성하는 기능을 갖도록 합니다.
*   **작업 단위:**
    *   `SymbolData.gd`에 `next_instance_id` 변수를 추가합니다.
    *   `SymbolData.gd`에 `create_player_symbol_instance(definition_id: int)` 함수를 추가합니다. 이 함수는 새로운 `PlayerSymbolInstance`를 생성하고, 고유한 `instance_id`를 부여하며, `definition_id`를 설정하여 반환합니다.

## [x] 2. GameBoard.gd에서 PlayerSymbolInstance 사용
*   **목표:** `GameBoard.gd`가 `Symbol` 객체 대신 `PlayerSymbolInstance` 객체를 소유하도록 변경합니다.
*   **작업 단위:**
    *   `GameBoard.gd`의 `player_symbols` 배열이 `PlayerSymbolInstance` 타입을 저장하도록 변경합니다.
    *   `_ready()` 함수에서 "River" 심볼을 가져올 때, `SymbolData`의 새로운 함수를 사용하여 `PlayerSymbolInstance`를 생성하고 `player_symbols`에 추가합니다.

## [x] 3. 플레이어 소유 심볼을 보드에 시각적으로 표시
*   **목표:** 플레이어가 소유한 심볼들이 게임 보드 위에 실제로 보이도록 합니다.
*   **작업 단위:**
    *   `GameBoard.gd`에 논리적 보드(`board_grid`)를 추가하고 초기화합니다.
    *   `GameBoard.gd`에서 `player_symbols` 배열에 있는 `PlayerSymbolInstance`들을 무작위로 보드 슬롯에 배치합니다. (20개 초과 심볼 처리 포함)
    *   각 심볼의 시각적 표현(예: 심볼 이름이 적힌 `Label` 또는 아이콘 `TextureRect`)을 슬롯에 추가합니다.

## [ ] 4. 효과 시스템 스크립트 구현
*   **목표:** 통일된 '트리거(Trigger)' 및 '효과(Effect)' 시스템의 기본 구조를 구현합니다.
*   **작업 단위:**
    *   `res://scripts/effects/` 폴더와 `res://scripts/triggers/` 폴더를 생성합니다.
    *   `Effect.gd` (기본 효과 클래스) 및 `FoodEffect.gd` (구체적 효과) 스크립트를 생성합니다.
    *   `EffectTrigger.gd` (기본 트리거 클래스) 및 `AlwaysActiveTrigger.gd`, `NearbyInteractionTrigger.gd`, `CounterTrigger.gd` (구체적 트리거) 스크립트를 생성합니다.

## [ ] 5. 심볼 및 인스턴스 데이터 구조 업데이트
*   **목표:** 새로운 효과 시스템에 맞춰 심볼 및 플레이어 심볼 인스턴스 데이터 구조를 업데이트합니다.
*   **작업 단위:**
    *   `Symbol.gd`에 `triggers: Array[EffectTrigger]` 속성을 추가합니다.
    *   `PlayerSymbolInstance.gd`에 `effect_counters: Dictionary` 속성을 추가합니다.

## [ ] 6. 게임 보드 로직 업데이트
*   **목표:** `gameboard.gd`의 심볼 상호작용 로직을 새로운 효과 시스템에 맞춰 변경합니다.
*   **작업 단위:**
    *   `_get_nearby_coordinates()` 도우미 함수를 구현합니다.
    *   `_update_food_amount()` 헬퍼 함수를 구현합니다.
    *   `_process_symbol_interactions()` 함수를 업데이트하여 심볼의 `triggers` 배열을 순회하고 각 트리거의 `check_and_apply()` 메서드를 호출하도록 합니다.
