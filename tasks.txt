# Next Steps for Godot Project (as of 2025-08-12)

## Recent Updates (2025-08-12)
*   'Spin' 버튼과 `_on_spin_button_pressed()` 함수 연결 및 배치 로직 개선.
*   `_get_nearby_coordinates()` 도우미 함수 구현 및 테스트 완료.
*   **통일된 '트리거(Trigger)' 및 '효과(Effect)' 시스템 설계 완료:**
    *   `Effect.gd`, `FoodEffect.gd` (효과 본체) 기본 클래스 및 구체적 효과 정의.
    *   `EffectTrigger.gd`, `AlwaysActiveTrigger.gd`, `NearbyInteractionTrigger.gd`, `CounterTrigger.gd` (트리거 조건) 기본 클래스 및 구체적 트리거 정의.
    *   `Symbol` 리소스에 `triggers` 배열 추가.
    *   `PlayerSymbolInstance`에 `effect_counters` 딕셔너리 추가.
    *   `gameboard.gd`의 `_process_symbol_interactions()` 로직을 트리거 시스템에 맞춰 변경.
    *   `_update_food_amount` 헬퍼 함수 추가.

## [x] 1. 심볼 인스턴스 ID 생성 및 관리 (SymbolData.gd 수정)
*   **목표:** `SymbolData`가 플레이어가 소유할 개별 심볼 인스턴스(`PlayerSymbolInstance`)에 고유한 ID를 부여하고 생성하는 기능을 갖도록 합니다.
*   **작업 단위:**
    *   `SymbolData.gd`에 `next_instance_id` 변수를 추가합니다.
    *   `SymbolData.gd`에 `create_player_symbol_instance(definition_id: int)` 함수를 추가합니다. 이 함수는 새로운 `PlayerSymbolInstance`를 생성하고, 고유한 `instance_id`를 부여하며, `definition_id`를 설정하여 반환합니다.

## [x] 2. GameBoard.gd에서 PlayerSymbolInstance 사용
*   **목표:** `GameBoard.gd`가 `Symbol` 객체 대신 `PlayerSymbolInstance` 객체를 소유하도록 변경합니다.
*   **작업 단위:**
    *   `GameBoard.gd`의 `player_symbols` 배열이 `PlayerSymbolInstance` 타입을 저장하도록 변경합니다.
    *   `_ready()` 함수에서 "River" 심볼을 가져올 때, `SymbolData`의 새로운 함수를 사용하여 `PlayerSymbolInstance`를 생성하고 `player_symbols`에 추가합니다.

## [x] 3. 플레이어 소유 심볼을 보드에 시각적으로 표시
*   **목표:** 플레이어가 소유한 심볼들이 게임 보드 위에 실제로 보이도록 합니다.
*   **작업 단위:**
    *   `GameBoard.gd`에 논리적 보드(`board_grid`)를 추가하고 초기화합니다.
    *   `GameBoard.gd`에서 `player_symbols` 배열에 있는 `PlayerSymbolInstance`들을 무작위로 보드 슬롯에 배치합니다. (20개 초과 심볼 처리 포함)
    *   각 심볼의 시각적 표현(예: 심볼 이름이 적힌 `Label` 또는 아이콘 `TextureRect`)을 슬롯에 추가합니다.

## [ ] 4. 효과 시스템 구현 (Enum + Dictionary 방식)
*   **목표:** Enum + Dictionary 기반 효과 시스템 구현
*   **전체 구조:**
    *   타입 정의 파일: 모든 조건 타입과 효과 타입을 enum으로 관리
    *   중앙 처리기: 조건 체크와 효과 실행을 담당하는 단일 클래스
    *   데이터 구조: Dictionary 배열로 각 심볼의 효과들 저장
*   **핵심 컴포넌트:**
    *   조건 타입 enum: NONE, ADJACENT_SYMBOL_COUNT, SAME_ROW_SYMBOL 등
    *   효과 타입 enum: ADD_FOOD, ADD_INSTANCE_VAR, ADD_EXP 등
    *   각 효과는 condition과 effect 두 부분으로 구성 (각각 type과 params)
*   **작업 단위:**
    *   `EffectTypes.gd`: 조건 타입과 효과 타입 enum 정의
    *   `EffectProcessor.gd`: 중앙 처리기 클래스 생성
    *   `Symbol.gd`에 `effects: Array[Dictionary]` 속성 추가

## [ ] 5. 심볼 데이터 구조 업데이트
*   **목표:** 새로운 Enum + Dictionary 효과 시스템에 맞춰 데이터 구조 업데이트
*   **작업 단위:**
    *   기존 `triggers` 관련 코드 제거
    *   `Symbol.gd`의 `effects` 배열을 Dictionary 형태로 설정
    *   `PlayerSymbolInstance.gd`에 필요시 상태 관리 변수 추가

## [ ] 6. 게임 보드 로직 업데이트
*   **목표:** `gameboard.gd`의 심볼 상호작용 로직을 새로운 시스템에 맞춰 변경
*   **작업 단위:**
    *   `_process_symbol_interactions()`에서 EffectProcessor 사용
    *   메인 프로세서가 보드 순회하며 각 심볼의 모든 효과 검사
    *   조건 만족시 효과 실행하는 로직 구현
